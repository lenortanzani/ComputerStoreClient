@using Microsoft.Extensions.Configuration
@model IEnumerable<ComputerStore.Models.Order>
@inject IConfiguration Configuration

@{
    ViewData["Title"] = "DeliveryList";
}

<h1>Заказы на доставку</h1>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UserId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Item.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Quantity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address)
            </th>
            @*<th>
                @Html.DisplayNameFor(model => model.CourierId)
            </th>*@
            <th>
                @Html.DisplayNameFor(model => model.Datetimeorderplaced)
            </th>
            @*<th>
                @Html.DisplayNameFor(model => model.Datetimeorderdelivered)
            </th>*@
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UserId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Quantity)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Address)
                </td>
                @*<td>
                    @Html.DisplayFor(modelItem => item.CourierId)
                </td>*@
                <td>
                    @Html.DisplayFor(modelItem => item.Datetimeorderplaced)
                </td>
                @*<td>
                    @Html.DisplayFor(modelItem => item.Datetimeorderdelivered)
                </td>*@
                <td>
                    @if (string.IsNullOrWhiteSpace(item.CourierId))
                    {
                        @using (Html.BeginForm("StartDelivery", "Home", new { id = item.Id }, FormMethod.Post))
                        {
                            <button class="btn btn-secondary">Взять заказ</button>
                        }
                    }
                    else
                    {
                        @using (Html.BeginForm("FinishDelivery", "Home", new { id = item.Id }, FormMethod.Post))
                        {
                            <button class="btn btn-primary">Отметить как доставленный</button>
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>


<script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>

<script>
        "use strict";
    var connection = new signalR.HubConnectionBuilder().withUrl("/computerStoreHub").build();
        connection
            .start()
            .catch(() => {
                alert("Error while establishing connection");
            });
            connection.on("@Configuration["RabbitMq:OnOrdersChanged"]", function () {
                window.location.reload();
        });

</script>